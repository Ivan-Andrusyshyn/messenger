{"version":3,"file":"static/js/592.a3ea8714.chunk.js","mappings":"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","sources":["components/ChatInfo/TextChat/Text.tsx","components/ChatInfo/Chatinfo.tsx","components/Loader/Loader.tsx","components/dataFetch/dataFetch.ts"],"sourcesContent":["import { ChangeEvent, FC, useState } from \"react\";\r\nimport \"./text.css\";\r\n\r\ninterface ObjNotice {\r\n  text: string;\r\n}\r\n\r\nexport const Text: FC = () => {\r\n  const [text, setText] = useState(\"\");\r\n  const [textArray, setTextArray] = useState<ObjNotice[]>([]);\r\n\r\n  const handleOnChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setText(e.currentTarget.value);\r\n  };\r\n\r\n  const handleSubmit = (e: ChangeEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (!text) return;\r\n    const arrMessage: ObjNotice = { text: text };\r\n    setTextArray((prevTextArray) => [...prevTextArray, arrMessage]);\r\n    setText(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"text-container\">\r\n      <div className=\"chat\">\r\n        {textArray.map((message, index) => (\r\n          <div className=\"message-wrap\" key={index}>\r\n            <p>{message.text}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <form className=\"chat-input\" onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter a message\"\r\n          value={text}\r\n          onChange={handleOnChange}\r\n        />\r\n        <button type=\"submit\">Отправить</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { useLocation, useParams } from \"react-router-dom\";\r\nimport \"./chatinfo.css\";\r\nimport { Loader } from \"../Loader/Loader\";\r\nimport { Text } from \"./TextChat/Text\";\r\nimport React from \"react\";\r\nimport { fetchTextChat } from \"../dataFetch/dataFetch\";\r\ninterface APIEntry {\r\n  API: string;\r\n  Description?: string;\r\n}\r\nconst Chatinfo: React.FC = () => {\r\n  const { chatId } = useParams<string>();\r\n  const [list, setList] = useState<APIEntry[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const validChatId = chatId || \"\";\r\n    fetchTextChat(validChatId, setLoading, setList);\r\n  }, [chatId]);\r\n\r\n  return (\r\n    <div className=\"item\">\r\n      {loading ? (\r\n        <Loader />\r\n      ) : (\r\n        list.map(({ API, Description }) => (\r\n          <div key={API} className=\"name-contact\">\r\n            <h1 className=\"title\">{API}</h1>\r\n            <p className=\"description\">{Description}</p>\r\n          </div>\r\n        ))\r\n      )}\r\n      <Text />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatinfo;\r\n","import React, { FC } from \"react\";\r\nimport \"./loader.css\";\r\nconst Loader: FC = () => {\r\n  return (\r\n    <div className=\"spinner\">\r\n      <div className=\"part\"></div>\r\n      <div className=\"part\"></div>\r\n      <div className=\"part\"></div>\r\n    </div>\r\n  );\r\n};\r\nexport { Loader };\r\n","import axios from \"axios\";\r\ninterface APIEntry {\r\n  API: string;\r\n  Description?: string;\r\n}\r\n\r\nconst baseUrl = \"https://api.publicapis.org/entries\";\r\n\r\nconst fetchBase = async (): Promise<APIEntry[]> => {\r\n  const { data } = await axios.get(`${baseUrl}`);\r\n  const listInfo = data.entries.slice(10, 26);\r\n  return listInfo;\r\n};\r\nexport const fetchData = async (): Promise<void> => {\r\n  try {\r\n    const data: APIEntry[] = await fetchBase();\r\n    const localItems: APIEntry[] = JSON.parse(\r\n      localStorage.getItem(\"contact\") || \"[]\"\r\n    );\r\n    if (localItems.length === 0) {\r\n      localStorage.setItem(\"contact\", JSON.stringify(data));\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nexport const fetchTextChat = async (\r\n  chatId: string,\r\n  setLoading: Function,\r\n  setList: Function\r\n): Promise<void> => {\r\n  try {\r\n    setLoading(true);\r\n    const data: APIEntry[] = await fetchBase();\r\n    const filter = data.filter(({ API }) => API === chatId);\r\n    setList(filter);\r\n  } catch (err) {\r\n    console.log(err);\r\n  } finally {\r\n    setLoading(false);\r\n  }\r\n};\r\n"],"names":["Text","_useState","useState","_useState2","_slicedToArray","text","setText","_useState3","_useState4","textArray","setTextArray","_jsxs","className","children","_jsx","map","message","index","onSubmit","e","preventDefault","arrMessage","prevTextArray","concat","_toConsumableArray","type","placeholder","value","onChange","currentTarget","chatId","useParams","list","setList","loading","setLoading","useEffect","validChatId","fetchTextChat","Loader","_ref","API","Description","fetchBase","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_yield$axios$get","data","listInfo","wrap","_context","prev","next","axios","get","sent","entries","slice","abrupt","stop","apply","arguments","fetchData","_ref2","_callee2","_context2","JSON","parse","localStorage","getItem","length","setItem","stringify","t0","console","log","_ref3","_callee3","filter","_context3","_ref4","finish","_x","_x2","_x3"],"sourceRoot":""}