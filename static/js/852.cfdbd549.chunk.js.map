{"version":3,"file":"static/js/852.cfdbd549.chunk.js","mappings":"iNAQaA,EAAW,WACtB,IAAQC,GAAWC,EAAAA,EAAAA,MAAXD,OACRE,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAAkCL,EAAAA,EAAAA,UAAsB,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAApDE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,GAAkCT,EAAAA,EAAAA,WAAS,GAAMU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,IAO9BG,EAAAA,EAAAA,YAAU,WAFRL,EAAa,GAIf,GAAG,CAACX,IAkBJ,OACEiB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,CAC5BL,IAAaM,EAAAA,EAAAA,KAAA,OAAKF,UAAU,aAAYC,SAAC,0BAC1CC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,OAAMC,SAClBT,EAAUW,KAAI,SAACC,EAASC,GAAK,OAC5BH,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,UAC3BC,EAAAA,EAAAA,KAAA,KAAAD,SAAIG,EAAQhB,QADqBiB,EAE7B,OAGVN,EAAAA,EAAAA,MAAA,QAAMC,UAAU,aAAaM,SArBZ,SAACC,GAEpB,GADAA,EAAEC,kBACGpB,EAEH,OATFS,GAAa,QACbY,YAAW,WACTZ,GAAa,EACf,GAAG,KAQH,IAAMa,EAAwB,CAAEtB,KAAMA,GACtCK,GAAa,SAACkB,GAAa,SAAAC,QAAAC,EAAAA,EAAAA,GAASF,GAAa,CAAED,GAAa,IAChErB,EAAQ,GACV,EAYwDY,SAAA,EAClDC,EAAAA,EAAAA,KAAA,SACEY,KAAK,OACLC,YAAY,kBACZC,MAAO5B,EACP6B,SAzCe,SAACV,GACtBlB,EAAQkB,EAAEW,cAAcF,MAC1B,KAyCMd,EAAAA,EAAAA,KAAA,UAAQY,KAAK,SAAQb,SAAC,gEAI9B,E,QCtBA,EA3B2B,WACzB,IAAQnB,GAAWC,EAAAA,EAAAA,MAAXD,OACRE,GAAwBC,EAAAA,EAAAA,UAAqB,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAzCmC,EAAIjC,EAAA,GAAEkC,EAAOlC,EAAA,GACpBI,GAA8BL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAtC+B,EAAO9B,EAAA,GAAE+B,EAAU/B,EAAA,GAO1B,OALAO,EAAAA,EAAAA,YAAU,WACR,IAAMyB,EAAczC,GAAU,IAC9B0C,EAAAA,EAAAA,IAAcD,EAAaD,EAAYF,EACzC,GAAG,CAACtC,KAGFiB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,OAAMC,SAAA,CAClBoB,GACCnB,EAAAA,EAAAA,KAACuB,EAAAA,EAAM,IAEPN,EAAKhB,KAAI,SAAAuB,GAAA,IAAGC,EAAGD,EAAHC,IAAKC,EAAWF,EAAXE,YAAW,OAC1B7B,EAAAA,EAAAA,MAAA,OAAeC,UAAU,eAAcC,SAAA,EACrCC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,QAAOC,SAAE0B,KACvBzB,EAAAA,EAAAA,KAAA,KAAGF,UAAU,cAAaC,SAAE2B,MAFpBD,EAGJ,KAGVzB,EAAAA,EAAAA,KAACrB,EAAI,MAGX,C,0EClCM4C,EAAa,WACjB,OACE1B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,UAASC,SAAA,EACtBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,UACfE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,UACfE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,WAGrB,C,qICHa6B,EAAS,eAAAH,GAAAI,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAAL,EAAAA,EAAAA,KAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEqCC,EAAAA,EAAMC,IAHpD,sCAKV,KAAD,EACuD,OADvDR,EAAAI,EAAAK,KAFOR,EAAID,EAAJC,KAGFC,EAAuBD,EAAKS,QAAQC,MAAM,GAAI,IAAGP,EAAAQ,OAAA,SAChDV,GAAQ,OAEE,MAFFE,EAAAC,KAAA,EAAAD,EAAAS,GAAAT,EAAA,SAEfU,QAAQC,IAAGX,EAAAS,IAAMT,EAAAS,GAAA,yBAAAT,EAAAY,OAAA,GAAAjB,EAAA,kBAGpB,kBAXqB,OAAAP,EAAAyB,MAAA,KAAAC,UAAA,KAYTC,EAAS,eAAAC,GAAAxB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAuB,IAAA,IAAApB,EAAA,OAAAJ,EAAAA,EAAAA,KAAAM,MAAA,SAAAmB,GAAA,cAAAA,EAAAjB,KAAAiB,EAAAhB,MAAA,OAEkD,GAFlDgB,EAAAjB,KAAA,IAEFkB,KAAKC,MAAMC,aAAaC,QAAQ,YAAc,MAClDC,OAAS,GAAC,CAAAL,EAAAhB,KAAA,eAAAgB,EAAAV,OAAA,wBAAAU,EAAAhB,KAAA,EACMX,IAAY,KAAD,EAApCM,EAAgBqB,EAAAb,KACtBgB,aAAaG,QAAQ,UAAWL,KAAKM,UAAU5B,IAAOqB,EAAAhB,KAAA,iBAAAgB,EAAAjB,KAAA,GAAAiB,EAAAT,GAAAS,EAAA,SAEtDR,QAAQC,IAAGO,EAAAT,IAAM,yBAAAS,EAAAN,OAAA,GAAAK,EAAA,mBAEpB,kBATqB,OAAAD,EAAAH,MAAA,KAAAC,UAAA,KAWT5B,EAAa,eAAAwC,GAAAlC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAiC,EAC3BnF,EACAwC,EACAF,GAAiB,IAAAe,EAAA+B,EAAA,OAAAnC,EAAAA,EAAAA,KAAAM,MAAA,SAAA8B,GAAA,cAAAA,EAAA5B,KAAA4B,EAAA3B,MAAA,OAGE,OAHF2B,EAAA5B,KAAA,EAGfjB,GAAW,GAAM6C,EAAA3B,KAAA,EACcX,IAAY,KAAD,EAApCM,EAAgBgC,EAAAxB,KAChBuB,EAAS/B,EAAK+B,QAAO,SAAAE,GAAM,OAAAA,EAAHzC,MAAkB7C,CAAM,IACtDsC,EAAQ8C,GAAQC,EAAA3B,KAAA,gBAAA2B,EAAA5B,KAAA,EAAA4B,EAAApB,GAAAoB,EAAA,SAEhBnB,QAAQC,IAAGkB,EAAApB,IAAM,QAEC,OAFDoB,EAAA5B,KAAA,GAEjBjB,GAAW,GAAO6C,EAAAE,OAAA,6BAAAF,EAAAjB,OAAA,GAAAe,EAAA,wBAErB,gBAfyBK,EAAAC,EAAAC,GAAA,OAAAR,EAAAb,MAAA,KAAAC,UAAA,I","sources":["components/ChatInfo/TextChat/Text.tsx","components/ChatInfo/Chatinfo.tsx","components/Loader/Loader.tsx","components/dataFetch/dataFetch.ts"],"sourcesContent":["import { ChangeEvent, FC, useEffect, useState } from \"react\";\r\nimport \"./text.css\";\r\nimport \"./textError.css\";\r\nimport { useParams } from \"react-router-dom\";\r\ninterface ObjNotice {\r\n  text: string;\r\n}\r\n\r\nexport const Text: FC = () => {\r\n  const { chatId } = useParams();\r\n  const [text, setText] = useState(\"\");\r\n  const [textArray, setTextArray] = useState<ObjNotice[]>([]);\r\n  const [errHidden, setErrHidden] = useState(false);\r\n  const handleOnChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setText(e.currentTarget.value);\r\n  };\r\n  const checkPage = () => {\r\n    setTextArray([]);\r\n  };\r\n  useEffect(() => {\r\n    checkPage();\r\n  }, [chatId]);\r\n  const changeBooleon = () => {\r\n    setErrHidden(true);\r\n    setTimeout(() => {\r\n      setErrHidden(false);\r\n    }, 2000);\r\n  };\r\n  const handleSubmit = (e: ChangeEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (!text) {\r\n      changeBooleon();\r\n      return;\r\n    }\r\n    const arrMessage: ObjNotice = { text: text };\r\n    setTextArray((prevTextArray) => [...prevTextArray, arrMessage]);\r\n    setText(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"text-container\">\r\n      {errHidden && <div className=\"text-error\">Please, enter text !</div>}\r\n      <div className=\"chat\">\r\n        {textArray.map((message, index) => (\r\n          <div className=\"message-wrap\" key={index}>\r\n            <p>{message.text}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <form className=\"chat-input\" onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter a message\"\r\n          value={text}\r\n          onChange={handleOnChange}\r\n        />\r\n        <button type=\"submit\">Отправить</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { useLocation, useParams } from \"react-router-dom\";\r\nimport \"./chatinfo.css\";\r\nimport { Loader } from \"../Loader/Loader\";\r\nimport { Text } from \"./TextChat/Text\";\r\nimport React from \"react\";\r\nimport { fetchTextChat } from \"../dataFetch/dataFetch\";\r\ninterface APIEntry {\r\n  API: string;\r\n  Description?: string;\r\n}\r\nconst Chatinfo: React.FC = () => {\r\n  const { chatId } = useParams<string>();\r\n  const [list, setList] = useState<APIEntry[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const validChatId = chatId || \"\";\r\n    fetchTextChat(validChatId, setLoading, setList);\r\n  }, [chatId]);\r\n\r\n  return (\r\n    <div className=\"item\">\r\n      {loading ? (\r\n        <Loader />\r\n      ) : (\r\n        list.map(({ API, Description }) => (\r\n          <div key={API} className=\"name-contact\">\r\n            <h1 className=\"title\">{API}</h1>\r\n            <p className=\"description\">{Description}</p>\r\n          </div>\r\n        ))\r\n      )}\r\n      <Text />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatinfo;\r\n","import React, { FC } from \"react\";\r\nimport \"./loader.css\";\r\nconst Loader: FC = () => {\r\n  return (\r\n    <div className=\"spinner\">\r\n      <div className=\"part\"></div>\r\n      <div className=\"part\"></div>\r\n      <div className=\"part\"></div>\r\n    </div>\r\n  );\r\n};\r\nexport { Loader };\r\n","import axios from \"axios\";\r\ninterface APIEntry {\r\n  API: string;\r\n  Description?: string;\r\n}\r\n\r\nconst baseUrl = \"https://api.publicapis.org/entries\";\r\nexport const fetchBase = async (): Promise<APIEntry[]> => {\r\n  try {\r\n    const { data }: { data: { entries: APIEntry[] } } = await axios.get(\r\n      baseUrl\r\n    );\r\n    const listInfo: APIEntry[] = data.entries.slice(10, 26);\r\n    return listInfo;\r\n  } catch (err) {\r\n    console.log(err);\r\n    throw err;\r\n  }\r\n};\r\nexport const fetchData = async (): Promise<void> => {\r\n  try {\r\n    const localItems = JSON.parse(localStorage.getItem(\"contact\") || \"[]\");\r\n    if (localItems.length > 0) return;\r\n    const data: APIEntry[] = await fetchBase();\r\n    localStorage.setItem(\"contact\", JSON.stringify(data));\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nexport const fetchTextChat = async (\r\n  chatId: string,\r\n  setLoading: Function,\r\n  setList: Function\r\n): Promise<void> => {\r\n  try {\r\n    setLoading(true);\r\n    const data: APIEntry[] = await fetchBase();\r\n    const filter = data.filter(({ API }) => API === chatId);\r\n    setList(filter);\r\n  } catch (err) {\r\n    console.log(err);\r\n  } finally {\r\n    setLoading(false);\r\n  }\r\n};\r\n"],"names":["Text","chatId","useParams","_useState","useState","_useState2","_slicedToArray","text","setText","_useState3","_useState4","textArray","setTextArray","_useState5","_useState6","errHidden","setErrHidden","useEffect","_jsxs","className","children","_jsx","map","message","index","onSubmit","e","preventDefault","setTimeout","arrMessage","prevTextArray","concat","_toConsumableArray","type","placeholder","value","onChange","currentTarget","list","setList","loading","setLoading","validChatId","fetchTextChat","Loader","_ref","API","Description","fetchBase","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_yield$axios$get","data","listInfo","wrap","_context","prev","next","axios","get","sent","entries","slice","abrupt","t0","console","log","stop","apply","arguments","fetchData","_ref2","_callee2","_context2","JSON","parse","localStorage","getItem","length","setItem","stringify","_ref3","_callee3","filter","_context3","_ref4","finish","_x","_x2","_x3"],"sourceRoot":""}