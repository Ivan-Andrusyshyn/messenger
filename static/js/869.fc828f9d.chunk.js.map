{"version":3,"file":"static/js/869.fc828f9d.chunk.js","mappings":"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","sources":["components/ChatInfo/TextChat/TextChat.tsx","components/ChatInfo/Contact/Contact.tsx","components/ChatInfo/Chatinfo.tsx","components/Loader/Loader.tsx"],"sourcesContent":["import { ChangeEvent, FC, useEffect, useState } from \"react\";\r\nimport \"./text.css\";\r\nimport \"./textError.css\";\r\nimport { useParams } from \"react-router-dom\";\r\ninterface ObjNotice {\r\n  text: string;\r\n}\r\n\r\nexport const TextChat: FC = () => {\r\n  const { chatId } = useParams();\r\n  const [text, setText] = useState(\"\");\r\n  const [textArray, setTextArray] = useState<ObjNotice[]>([]);\r\n  const [errHidden, setErrHidden] = useState(false);\r\n  const handleOnChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setText(e.currentTarget.value);\r\n  };\r\n  const checkPage = () => {\r\n    setTextArray([]);\r\n  };\r\n  useEffect(() => {\r\n    checkPage();\r\n  }, [chatId]);\r\n  const changeBooleon = () => {\r\n    setErrHidden(true);\r\n    setTimeout(() => {\r\n      setErrHidden(false);\r\n    }, 2000);\r\n  };\r\n  const handleSubmit = (e: ChangeEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (!text) {\r\n      changeBooleon();\r\n      return;\r\n    }\r\n    const arrMessage: ObjNotice = { text: text };\r\n    setTextArray((prevTextArray) => [...prevTextArray, arrMessage]);\r\n    setText(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"text-container\">\r\n      {errHidden && <div className=\"text-error\">Please, enter text !</div>}\r\n      <div className=\"chat\">\r\n        {textArray.map((message, index) => (\r\n          <div className=\"message-wrap\" key={index}>\r\n            <p>{message.text}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <form className=\"chat-input\" onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter a message\"\r\n          value={text}\r\n          onChange={handleOnChange}\r\n        />\r\n        <button type=\"submit\">Отправить</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { APIEntry } from \"../../../storeRedux/sliceRedux/sliceRedux\";\r\n\r\ninterface ContactProps {\r\n  contact: APIEntry[];\r\n}\r\n\r\nexport const Contact: React.FC<ContactProps> = ({ contact }) => {\r\n  return (\r\n    <>\r\n      {contact.map(({ API, Description }: APIEntry) => {\r\n        return (\r\n          <div key={API} className=\"name-contact\">\r\n            <h1 className=\"title\">{API}</h1>\r\n            <p className=\"description\">{Description}</p>\r\n          </div>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport \"./chatinfo.css\";\r\nimport { Loader } from \"../Loader/Loader\";\r\nimport { TextChat } from \"./TextChat/TextChat\";\r\nimport React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { APIEntry } from \"../../storeRedux/sliceRedux/sliceRedux\";\r\nimport { Contact } from \"./Contact/Contact\";\r\nconst Chatinfo: React.FC = () => {\r\n  const { chatId } = useParams<string>();\r\n  const [list, setList] = useState<APIEntry[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const contacts = useSelector((state: any) => state.contacts.contacts);\r\n  const openContact = () => {\r\n    setLoading(true);\r\n    const filter: APIEntry[] = contacts.filter(\r\n      ({ API }: any) => API === chatId\r\n    );\r\n    setList(filter);\r\n    setTimeout(() => {\r\n      setLoading(false);\r\n    }, 1000);\r\n  };\r\n  useEffect(() => {\r\n    openContact();\r\n  }, [chatId, contacts]);\r\n  console.log(list);\r\n\r\n  return (\r\n    <>\r\n      {list.length > 0 && (\r\n        <div className=\"item\">\r\n          {loading ? (\r\n            <Loader />\r\n          ) : (\r\n            <>\r\n              <Contact contact={list} />\r\n              <TextChat />\r\n            </>\r\n          )}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Chatinfo;\r\n","import React, { FC } from \"react\";\r\nimport \"./loader.css\";\r\nconst Loader: FC = () => {\r\n  return (\r\n    <div className=\"spinner\">\r\n      <div className=\"part\"></div>\r\n      <div className=\"part\"></div>\r\n      <div className=\"part\"></div>\r\n    </div>\r\n  );\r\n};\r\nexport { Loader };\r\n"],"names":["TextChat","chatId","useParams","_useState","useState","_useState2","_slicedToArray","text","setText","_useState3","_useState4","textArray","setTextArray","_useState5","_useState6","errHidden","setErrHidden","useEffect","_jsxs","className","children","_jsx","map","message","index","onSubmit","e","preventDefault","setTimeout","arrMessage","prevTextArray","concat","_toConsumableArray","type","placeholder","value","onChange","currentTarget","Contact","_ref","contact","_Fragment","_ref2","API","Description","list","setList","loading","setLoading","contacts","useSelector","state","filter","openContact","console","log","length","Loader"],"sourceRoot":""}